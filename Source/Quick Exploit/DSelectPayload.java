// --------------------------------------------------------------------------------
// Name: DSelectPayload
// Abstract: Allows the user to select a compatible payload
// --------------------------------------------------------------------------------

// Includes
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;
import java.util.Timer;
import java.io.*;

public class DSelectPayload extends CAircrackDialog implements WindowListener, ActionListener
{
	protected final static long serialVersionUID = 1L;
	
	// Properties
	private String m_strSelectedPayload = "";
	private String m_strProvidedModule = "";
	private CTable m_tblAvailableExploits = null;
	private JButton m_btnSelect = null;
	private JButton m_btnCancel = null;
	
	// --------------------------------------------------------------------------------
	// Name: DSelectPayload
	// Abstract: Class constructor
	// --------------------------------------------------------------------------------
	public DSelectPayload(String strExploitName)
	{
		super("Select Payload", 400, 300, false, false, "");
		try
		{
			AddControls( );
			m_strProvidedModule = strExploitName;
		}
		catch (Exception excError)
		{
			CUtilities.WriteLog( excError );
		}
	}
	
	// --------------------------------------------------------------------------------
	// Name: AddControls
	// Abstract: Adds the controls to the form
	// --------------------------------------------------------------------------------
	private void AddControls( )
	{
		try
		{
			Container conControlArea = this.getContentPane( );
			SpringLayout splFrame = new SpringLayout( );
			conControlArea.setLayout( splFrame );
			
			m_tblAvailableExploits = CUtilities.AddTable(conControlArea, new String[] {"Name", "Description"}, null, 5, 5, 235, 390);
			m_btnSelect = CUtilities.AddButton(conControlArea, this, "Select", 243, 95, 18, 100);
			m_btnCancel = CUtilities.AddButton(conControlArea, this, "Cancel", 243, 205, 18, 100);
			
			m_btnSelect.setEnabled( false );
			m_btnCancel.setEnabled( false );
			
			addWindowListener( this );
		}
		catch (Exception excError )
		{
			CUtilities.WriteLog( excError );
		}
	}
	
	// --------------------------------------------------------------------------------
	// Name: GetSelectedPayload
	// Abstract: Allows an outside form to grab the selected payload
	// --------------------------------------------------------------------------------
	public String GetSelectedPayload( )
	{
		return m_strSelectedPayload;
	}

	// --------------------------------------------------------------------------------
	// Name: windowOpened
	// Abstract: Loads the available payloads
	// --------------------------------------------------------------------------------
	@Override
	public void windowOpened(WindowEvent weSource)
	{
		try
		{
			Timer timTimer = new Timer( );
			timTimer.schedule(new CLoadExploits( ), 1000);
		}
		catch (Exception excError)
		{
			CUtilities.WriteLog( excError );
		}
	}

	// --------------------------------------------------------------------------------
	// Name: CLoadExploits
	// Abstract: Loads the exploits available for the exploit
	// --------------------------------------------------------------------------------
	private class CLoadExploits extends TimerTask
	{
		
		// --------------------------------------------------------------------------------
		// Name: run
		// Abstract: Runs the timer task
		// --------------------------------------------------------------------------------
		public void run( ) 
		{
			try
			{
				setTitle( "Please wait..." );
				
				String astrCommand[] = new String[] {"msfcli", m_strProvidedModule, "P"};
				CProcess clsAvailablePayloads = new CProcess(astrCommand, true, false, false);
				BufferedReader brOutput = new BufferedReader( clsAvailablePayloads.GetOutput( ) );
				String strBuffer = brOutput.readLine( );
				int intNameIndex = -1;
				int intDescriptionIndex = -1;
				boolean blnReadingPayloads = false;
				
				while ( strBuffer != null )
				{
					if ( strBuffer.contains("Error: This type of module does not support payloads") )
					{
						JOptionPane.showMessageDialog(null, "This module doesn't support payloads.");
						setVisible( false );
						dispose( );
						break;
					}
					
					if ( strBuffer.contains("Name") && strBuffer.contains("Description") )
					{
						intNameIndex = strBuffer.indexOf("Name");
						intDescriptionIndex = strBuffer.indexOf("Description");
						brOutput.readLine( );
						strBuffer = brOutput.readLine( );
						blnReadingPayloads = true;
					}
					
					if ( blnReadingPayloads )
					{
						if ( strBuffer.length( ) >= intDescriptionIndex )
						{
							String strName = strBuffer.substring( intNameIndex, intDescriptionIndex );
							String strDescription = strBuffer.substring( intDescriptionIndex );
							strName = strName.trim( );
							strDescription = strDescription.trim( );
							m_tblAvailableExploits.AddRow(new Object[] {strName, strDescription});
						}
					}
					
					strBuffer = brOutput.readLine( );
				}
				clsAvailablePayloads.CloseProcess( );
				
				setTitle( "Select Payload" );
				m_btnSelect.setEnabled( true );
				m_btnCancel.setEnabled( true );
			}
			catch (Exception excError)
			{
				CUtilities.WriteLog( excError );
			}
		}
	}

	// --------------------------------------------------------------------------------
	// Name: actionPerformed
	// Abstract: Button clicks
	// --------------------------------------------------------------------------------
	public void actionPerformed(ActionEvent aeSource)
	{
		try
		{
			if ( aeSource.getSource( ) == m_btnSelect )			btnSelect_Click( );
			else if ( aeSource.getSource( ) == m_btnCancel )	btnCancel_Click( );
		}
		catch (Exception excError)
		{
			CUtilities.WriteLog( excError );
		}
	}

	// --------------------------------------------------------------------------------
	// Name: btnSelect_Click
	// Abstract: Select button Click event.
	// --------------------------------------------------------------------------------
	private void btnSelect_Click( )
	{
		try
		{
			String strSelectedPayload = String.valueOf(m_tblAvailableExploits.GetCellValue(m_tblAvailableExploits.GetSelectedRow(), "Name"));
			m_strSelectedPayload = strSelectedPayload;
			setVisible( false );
			dispose( );
		}
		catch (Exception excError)
		{
			CUtilities.WriteLog( excError );
		}
	}
	
	// --------------------------------------------------------------------------------
	// Name: btnCancel_Click
	// Abstract: Cancel button Click event.
	// --------------------------------------------------------------------------------
	private void btnCancel_Click( )
	{
		try
		{
			m_strSelectedPayload = "";
			setVisible( false );
			dispose( );
		}
		catch (Exception excError)
		{
			CUtilities.WriteLog( excError );
		}
	}
	
	public void windowActivated(WindowEvent arg0) {}
	public void windowClosed(WindowEvent arg0) {}
	public void windowClosing(WindowEvent arg0) {}
	public void windowDeactivated(WindowEvent arg0) {}
	public void windowDeiconified(WindowEvent arg0) {}
	public void windowIconified(WindowEvent arg0) {}

}
