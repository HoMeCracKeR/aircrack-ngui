// --------------------------------------------------------------------------------
// Name: DLaunchExploit
// Abstract: Launches a quick exploit against a target
// --------------------------------------------------------------------------------

// Includes
import javax.swing.*;
import org.w3c.dom.*;
import java.awt.event.*;
import java.io.*;

public class DLaunchExploit extends CAircrackWindow
{

	private String m_strExploitName = "";
	protected final static long serialVersionUID = 1L;
	
	// Controls
	private JLabel m_lblDescriptiveName = null;
	private JLabel m_lblExploitName = null;
	private JLabel m_lblVersion = null;
	private JLabel m_lblPlatform = null;
	private JLabel m_lblPrivileged = null;
	private JLabel m_lblLicense = null;
	private JLabel m_lblRank = null;
	private JLabel m_lblProvidedBy = null;
	private CTable m_tblSettings = null;
	private JTextArea m_txaDescription = null;
	private JCheckBox m_chkIncludePayload = null;	
	private JButton m_btnExecute = null;
	
	private String m_strSelectedPayload = "";
	
	// --------------------------------------------------------------------------------
	// Name: DLaunchExploit
	// Abstract: Class constructor
	// --------------------------------------------------------------------------------
	public DLaunchExploit( String strExploitName )
	{
		super("Launch Exploit", 400, 475, false, false, "");
		try
		{ 
			m_strExploitName = strExploitName;
			AddControls( );
		}
		catch (Exception excError)
		{
			CUtilities.WriteLog( excError );
		}
	}

	// --------------------------------------------------------------------------------
	// Name: AddControls
	// Abstract: Adds the controls to the form
	// --------------------------------------------------------------------------------
	private void AddControls( )
	{
		try
		{
			m_lblDescriptiveName = CUtilities.AddLabel(m_cntControlContainer, "Please wait...", 5, 5);
			m_lblExploitName = CUtilities.AddLabel(m_cntControlContainer, "", 25, 5);
			m_lblVersion = CUtilities.AddLabel(m_cntControlContainer, "", 45, 5);
			m_lblPlatform = CUtilities.AddLabel(m_cntControlContainer, "", 65, 5);
			m_lblPrivileged = CUtilities.AddLabel(m_cntControlContainer, "", 85, 5);
			m_lblLicense = CUtilities.AddLabel(m_cntControlContainer, "", 105, 5);
			m_lblRank = CUtilities.AddLabel(m_cntControlContainer, "", 125, 5);
			m_lblProvidedBy = CUtilities.AddLabel(m_cntControlContainer, "", 145, 5);
			CUtilities.AddLabel(m_cntControlContainer, "Description:", 170, 5);

			m_txaDescription = new JTextArea( 5, 34 );
			m_txaDescription.setLineWrap( true );
			JScrollPane scpTextArea = new JScrollPane(m_txaDescription);
			m_cntControlContainer.add( scpTextArea );
			SpringLayout splFrame = (SpringLayout)m_cntControlContainer.getLayout( );
			splFrame.getConstraints( scpTextArea ).setX( Spring.constant( 5 ) );
            splFrame.getConstraints( scpTextArea ).setY( Spring.constant( 190 ) );            
            scpTextArea.setVerticalScrollBarPolicy( JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED );
            
			CUtilities.AddLabel(m_cntControlContainer, "Settings:", 270, 5);
			m_tblSettings = CUtilities.AddTable(m_cntControlContainer, new String[]{"Name", "Current", "Required", "Description"}, null, 290, 5, 100, 390);
			m_tblSettings.SetReadOnly(false, "Current");
			
			m_chkIncludePayload = CUtilities.AddCheckBox(m_cntControlContainer, this, "Include Payload", 390, 5);
			
			m_btnExecute = CUtilities.AddButton(m_cntControlContainer, this, "Execute", 415, 150, 18, 100);
			
			m_txaDescription.setEditable( false );
		}
		catch (Exception excError)
		{
			CUtilities.WriteLog( excError );
		}
	}

	// --------------------------------------------------------------------------------
	// Name: windowOpened
	// Abstract: Called when the window is opened
	// --------------------------------------------------------------------------------
	@Override
	public void windowOpened( WindowEvent weSource )
	{
		try
		{
			
			// Do we have a cache available?
			CXMLDocument clsMetasploitCache = new CXMLDocument( );
			Element eleCurrentExploitNode = null;
			boolean blnCacheFileExists = CacheFileExists( );
			boolean blnCacheDataAvailableForExploit;
			String strExploitType;
			
			if ( blnCacheFileExists == true )
			{
				clsMetasploitCache.LoadXMLIntoMemory("Metasploit.cache");
				strExploitType = CAircrackUtilities.ToProperCase(m_strExploitName.substring(0, m_strExploitName.indexOf("/")));
				eleCurrentExploitNode = clsMetasploitCache.FindElementByTagNameAndValue(clsMetasploitCache.GetRootElement( ), strExploitType, "Name", m_strExploitName);
				blnCacheDataAvailableForExploit = CacheAvailableForExploit(clsMetasploitCache, eleCurrentExploitNode);
				
				if ( blnCacheDataAvailableForExploit == true )
				{
					DisplayExploitInformationFromCache(eleCurrentExploitNode);
				}
				else
				{
					DisplayExploitInformationFromProcess(clsMetasploitCache, eleCurrentExploitNode, true);
				}
			}
			else
			{
				DisplayExploitInformationFromProcess(clsMetasploitCache, eleCurrentExploitNode, false);
			}
		}
		catch (Exception excError)
		{
			CUtilities.WriteLog( excError );
		}
	}

	// --------------------------------------------------------------------------------
	// Name: CacheFileExists
	// Abstract: Determines if the cache file exists
	// --------------------------------------------------------------------------------
	private boolean CacheFileExists( )
	{
		boolean blnCacheFileExists = false;
		try
		{
			File filCacheFile = new File("Metasploit.cache");
			blnCacheFileExists = filCacheFile.exists( );
		}
		catch (Exception excError)
		{
			CUtilities.WriteLog(excError);
		}
		return blnCacheFileExists;
	}
	
	// --------------------------------------------------------------------------------
	// Name: CacheAvailableForExploit
	// Abstract: Determines if a cache is available for the specified exploit.
	// --------------------------------------------------------------------------------
	private boolean CacheAvailableForExploit(CXMLDocument clsMetasploitCache, Element eleCurrentExploitNode)
	{
		boolean blnCacheAvailable = false;
		
		try
		{
			int intChildNodeCount;
			if ( CacheFileExists( ) == true )
			{
				if ( eleCurrentExploitNode != null )
				{
					intChildNodeCount = eleCurrentExploitNode.getChildNodes( ).getLength( );
					if ( intChildNodeCount > 0 )
						blnCacheAvailable = true;
				}
			}
		}
		catch (Exception excError)
		{
			CUtilities.WriteLog(excError);
		}
		
		return blnCacheAvailable;
	}
	
	// --------------------------------------------------------------------------------
	// Name: DisplayExploitInformationFromProcess
	// Abstract: Populates form with information from the process (option to write to
	//			 the cache)
	// --------------------------------------------------------------------------------
	private void DisplayExploitInformationFromProcess(CXMLDocument clsMetasploitCache, Element eleCurrentExploitNode, boolean blnCreateCache)
	{
		try
		{
			String astrCommand[] = new String[] {"msfcli", m_strExploitName, "S"};
			CProcess clsExploitInfo = new CProcess(astrCommand, true, true, false);
			BufferedReader brOutput = new BufferedReader( clsExploitInfo.GetOutput( ) );
			String strBuffer = brOutput.readLine( );
			JLabel lblUpdatedLabel = null;
			boolean blnLoadingHeaderInformation = true;
			boolean blnLoadingBasicOptions = false;
			boolean blnLoadingDescription = false;
			int intCurrentSettingIndex = 0;
			int intRequiredIndex = 0;
			int intDescriptionIndex = 0;
			String strDescription = "";
			Element eleBasicOptions = null; 

			if ( blnCreateCache )
				eleBasicOptions = clsMetasploitCache.AddChildNode("BasicOptions", eleCurrentExploitNode);
			
			while ( strBuffer != null )
			{
				if ( blnLoadingHeaderInformation == true && strBuffer.contains(":") )
				{
					
					lblUpdatedLabel = null;
					if ( strBuffer.contains("Name:") )
						lblUpdatedLabel = m_lblDescriptiveName;
					if ( strBuffer.contains("Module:") )
						lblUpdatedLabel = m_lblExploitName;
					if ( strBuffer.contains("Version:") )
						lblUpdatedLabel = m_lblVersion;
					if ( strBuffer.contains("Platform:") )
						lblUpdatedLabel = m_lblPlatform;
					if ( strBuffer.contains("Privileged:") )
						lblUpdatedLabel = m_lblPrivileged;
					if ( strBuffer.contains("License:") )
						lblUpdatedLabel = m_lblLicense;
					if ( strBuffer.contains("Rank:") )
						lblUpdatedLabel = m_lblRank;
					
					if ( lblUpdatedLabel != null )
					{
						String strFieldPrefix = strBuffer.substring(0, strBuffer.indexOf(":") + 1).trim( );
						String strFieldValue = strBuffer.substring(strBuffer.indexOf(":") + 1).trim( );
						lblUpdatedLabel.setText(strFieldPrefix + " " + strFieldValue);
						
						if ( blnCreateCache )
							clsMetasploitCache.AddChildNodeWithAttribute(strFieldPrefix.replace(":",  ""), eleCurrentExploitNode, "Value", strFieldValue);
					}

				}
				
				if ( strBuffer.contains("Provided by:") )
				{
					blnLoadingHeaderInformation = false;
					strBuffer = brOutput.readLine( );
					strBuffer = strBuffer.trim( );
					m_lblProvidedBy.setText("Provided By: " + strBuffer);
					
					if ( blnCreateCache )
						clsMetasploitCache.AddChildNodeWithAttribute("ProvidedBy", eleCurrentExploitNode, "Value", strBuffer);
				}
				
				if ( strBuffer.trim( ).equals("Basic options:") )
					blnLoadingBasicOptions = true;
				
				if ( strBuffer.trim( ).equals("Payload information:") || strBuffer.equals("Description:") )
					blnLoadingBasicOptions = false;
				
				if ( blnLoadingBasicOptions && strBuffer.contains("Name") && strBuffer.contains("Current Setting") &&
						strBuffer.contains("Required") && strBuffer.contains("Description") )
				{
					intCurrentSettingIndex = strBuffer.indexOf("Current Setting");
					intRequiredIndex = strBuffer.indexOf("Required");
					intDescriptionIndex = strBuffer.indexOf("Description");
					brOutput.readLine( );
				}
				else if ( blnLoadingBasicOptions && strBuffer.trim( ).equals("") == false && strBuffer.trim( ).equals("Basic options:") == false )
				{
					String strName = strBuffer.substring(0, intCurrentSettingIndex).trim();
					String strCurrentSetting = strBuffer.substring(intCurrentSettingIndex, intRequiredIndex).trim();
					String strRequired = strBuffer.substring(intRequiredIndex, intDescriptionIndex).trim();
					String strOptionDescription = strBuffer.substring(intDescriptionIndex).trim();
					
					m_tblSettings.AddRow(new String[] {strName, strCurrentSetting, strRequired, strOptionDescription});
					
					if ( blnCreateCache )
					{
						Element eleNewOption = clsMetasploitCache.AddChildNodeWithAttribute("Option", eleBasicOptions , "Name", strName);
						clsMetasploitCache.AddAttributeToNode(eleNewOption, "CurrentSetting", strCurrentSetting);
						clsMetasploitCache.AddAttributeToNode(eleNewOption, "Required", strRequired);
						clsMetasploitCache.AddAttributeToNode(eleNewOption, "Description", strOptionDescription);
					}
				}
				
				if ( strBuffer.trim( ).equals("Description:") )
					blnLoadingDescription = true;
				
				if ( blnLoadingDescription == true && (strBuffer.trim( ).equals("References:") || strBuffer.trim( ).equals("")) )
				{
					blnLoadingDescription = false;
					strDescription = strDescription.replace("\n", "");
					strDescription = strDescription.replace("  ", " ");
					strDescription = strDescription.trim( );
					m_txaDescription.setText(strDescription);
					
					if ( blnCreateCache )
						clsMetasploitCache.AddChildNodeWithAttribute("Description", eleCurrentExploitNode, "Value", strDescription);
				}
				
				if ( blnLoadingDescription && strBuffer.trim( ).equals("Description:") == false )
				{
					strDescription += strBuffer.trim( ) + " ";
				}
				
				strBuffer = brOutput.readLine( );
			}
			if ( blnCreateCache )
				clsMetasploitCache.SaveXMLToDisk("Metasploit.cache");
		}
		catch (Exception excError)
		{
			CUtilities.WriteLog(excError);
		}
	}
	
	// --------------------------------------------------------------------------------
	// Name: DisplayExploitInformationFromCache
	// Abstract: Populates form with information from the cache
	// --------------------------------------------------------------------------------
	private void DisplayExploitInformationFromCache( Element eleCurrentExploitNode )
	{
		try
		{
			String strName = eleCurrentExploitNode.getAttribute("Name");
			
			m_lblExploitName.setText( "Module: " + strName );
			NodeList ndlData = eleCurrentExploitNode.getChildNodes( );
			for ( int intIndex = 0; intIndex < ndlData.getLength( ); intIndex += 1 )
			{
				Element eleCurrentData = (Element)ndlData.item( intIndex );
				if ( eleCurrentData.getTagName( ).equals( "Name" ) )
					m_lblDescriptiveName.setText("Name: " + eleCurrentData.getAttribute("Value"));
				if ( eleCurrentData.getTagName( ).equals("Version") )
					m_lblVersion.setText("Version: " + eleCurrentData.getAttribute("Value"));
				if ( eleCurrentData.getTagName( ).equals("Platform") )
					m_lblPlatform.setText("Platform: " + eleCurrentData.getAttribute("Value"));
				if ( eleCurrentData.getTagName( ).equals("Privileged") )
					m_lblPrivileged.setText("Privileged: " + eleCurrentData.getAttribute("Value"));
				if ( eleCurrentData.getTagName( ).equals("License") )
					m_lblLicense.setText("License: " + eleCurrentData.getAttribute("Value"));
				if ( eleCurrentData.getTagName( ).equals("Rank") )
					m_lblRank.setText("Rank: " + eleCurrentData.getAttribute("Value"));
				if ( eleCurrentData.getTagName( ).equals("PrivilegedBy") )
					m_lblProvidedBy.setText("Provided by: " + eleCurrentData.getAttribute("Value"));
				if ( eleCurrentData.getTagName( ).equals("Description") )
					m_txaDescription.setText( eleCurrentData.getAttribute("Value") );
				if ( eleCurrentData.getTagName( ).equals("BasicOptions") )
				{
					NodeList ndlOptionList = eleCurrentData.getChildNodes( );
					Element eleCurrentOption = null;
					for ( int intOptionIndex = 0; intOptionIndex < ndlOptionList.getLength( ); intOptionIndex += 1 )
					{
						eleCurrentOption = (Element)ndlOptionList.item( intOptionIndex );
						String strOptionName = eleCurrentOption.getAttribute("Name");
						String strCurrentSetting = eleCurrentOption.getAttribute("CurrentSetting");
						String strRequired = eleCurrentOption.getAttribute("Required");
						String strOptionDescription = eleCurrentOption.getAttribute("Description");
						m_tblSettings.AddRow(new Object[] {strOptionName, strCurrentSetting, strRequired, strOptionDescription});
					}
				}
			}
		}
		catch (Exception excError)
		{
			CUtilities.WriteLog(excError);
		}
	}

	// --------------------------------------------------------------------------------
	// Name: actionPerformed
	// Abstract: Called when a button is clicked
	// --------------------------------------------------------------------------------
	public void actionPerformed(ActionEvent aeSource)
	{
		try
		{
			if ( aeSource.getSource( ) == m_btnExecute )				btnExecute_Click( );
			else if ( aeSource.getSource( ) == m_chkIncludePayload )	chkIncludePayload_Checked( );
		}
		catch (Exception excError)
		{
			CUtilities.WriteLog( excError );
		}
	}

	// --------------------------------------------------------------------------------
	// Name: btnExecute_Click
	// Abstract: Makes changes to exploit and then executes it
	// --------------------------------------------------------------------------------
	private void btnExecute_Click( )
	{
		try
		{
			boolean blnValidated = true;
			
			// Validate our exploit
			for ( int intIndex = 0; intIndex < m_tblSettings.GetRowCount( ); intIndex += 1 )
			{
				String strExploitOptionValue = String.valueOf(m_tblSettings.GetCellValue(intIndex, "Current"));
				String strExploitOptionRequired = String.valueOf(m_tblSettings.GetCellValue(intIndex, "Required"));
				
				if ( strExploitOptionRequired.equals("yes") && strExploitOptionValue.trim().equals("") )
				{
					blnValidated = false;
					break;
				}
			}
			
			if ( blnValidated )
			{
				String astrCommand[] = new String[] {"msfcli", m_strExploitName};
				// Validate our exploit
				for ( int intIndex = 0; intIndex < m_tblSettings.GetRowCount( ); intIndex += 1 )
				{
					String strExploitOptionName = String.valueOf(m_tblSettings.GetCellValue(intIndex, "Name"));
					String strExploitOptionValue = String.valueOf(m_tblSettings.GetCellValue(intIndex, "Current"));
					astrCommand = CAircrackUtilities.AddArgumentToArray(strExploitOptionName + "=" + strExploitOptionValue, astrCommand); 
				}
				astrCommand = CAircrackUtilities.AddArgumentToArray("E", astrCommand);
				DProgramOutput dlgOutput = new DProgramOutput("Launch Exploit", astrCommand);
				dlgOutput.setVisible( true );
			}
			else
			{
				JOptionPane.showMessageDialog(null, "One or more required parameters weren't specified.");
			}
		}
		catch (Exception excError)
		{
			CUtilities.WriteLog( excError );
		}
	}

	// --------------------------------------------------------------------------------
	// Name: chkIncludePayload_Checked
	// Abstract: If checked, prompt for payload. If unchecked, clear selected payload.
	// --------------------------------------------------------------------------------
	private void chkIncludePayload_Checked( )
	{
		try
		{
			if ( m_chkIncludePayload.isSelected( ) == true )
			{
				DSelectPayload dlgSelectPayload = new DSelectPayload( m_strExploitName );
				dlgSelectPayload.setVisible( true );
				
				m_strSelectedPayload = dlgSelectPayload.GetSelectedPayload( );
				if ( m_strSelectedPayload.equals("") == false )
					m_chkIncludePayload.setText("Include Payload: " + m_strSelectedPayload);
				else
				{
					m_chkIncludePayload.setText("Include Payload");
					m_chkIncludePayload.setSelected( false );
				}
			}
			else
			{
				m_chkIncludePayload.setText("Include Payload");
				m_strSelectedPayload = "";
			}
		}
		catch (Exception excError)
		{
			CUtilities.WriteLog( excError );
		}
	}
}
